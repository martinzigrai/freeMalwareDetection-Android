package com.talsec.freemalwaredetectiondemo.ui.screen

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.constraintlayout.compose.ConstraintLayout
import androidx.constraintlayout.compose.Dimension
import com.aheaditec.talsec_security.security.api.SuspiciousAppInfo
import com.talsec.freemalwaredetectiondemo.R
import com.talsec.freemalwaredetectiondemo.ui.theme.Gray

@Composable
fun Overlay(
    modifier: Modifier = Modifier,
    data: List<SuspiciousAppInfo>,
    onAddToWhitelistClicked: (SuspiciousAppInfo) -> Unit,
    onUninstallClicked: (SuspiciousAppInfo) -> Unit,
    onDismissClicked: () -> Unit
) {
    ConstraintLayout(
        modifier = modifier
            .fillMaxSize(0.9f)
            .background(Color.Red, shape = RoundedCornerShape(16.dp))
            .padding(16.dp)
    ) {
        val (title, message, divider, list, dismiss) = createRefs()

        Text(
            text = stringResource(R.string.suspicious_app_title),
            color = Color.White,
            textAlign = TextAlign.Center,
            fontSize = 32.sp,
            lineHeight = 36.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .constrainAs(title) {
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                    top.linkTo(parent.top)
                }
                .padding(vertical = 16.dp)
        )

        Text(
            text = stringResource(R.string.suspicious_app_message),
            color = Color.White,
            textAlign = TextAlign.Center,
            lineHeight = 16.sp,
            modifier = Modifier
                .constrainAs(message) {
                    start.linkTo(title.start)
                    end.linkTo(title.end)
                    top.linkTo(title.bottom)
                }
                .padding(16.dp)
        )

        HorizontalDivider(
            modifier = Modifier
                .constrainAs(divider) {
                    start.linkTo(message.start)
                    end.linkTo(message.end)
                    top.linkTo(message.bottom)
                }
                .padding(vertical = 16.dp),
            thickness = 2.dp,
            color = Color.White
        )

        LazyColumn(
            modifier = Modifier
                .constrainAs(list) {
                    start.linkTo(divider.start)
                    end.linkTo(divider.end)
                    top.linkTo(divider.bottom)
                    bottom.linkTo(dismiss.top)
                    height = Dimension.fillToConstraints
                    width = Dimension.fillToConstraints
                }
                .background(
                    Gray,
                    shape = RoundedCornerShape(16.dp)
                )
                .padding(16.dp)
        ) {
            items(data) { suspiciousAppInfo ->
                Item(
                    modifier = Modifier.fillMaxWidth(),
                    info = suspiciousAppInfo,
                    onAddToWhitelistClicked = { onAddToWhitelistClicked(suspiciousAppInfo) },
                    onUninstallClicked = { onUninstallClicked(suspiciousAppInfo) }
                )
            }
        }

        Button(
            modifier = Modifier
                .constrainAs(dismiss) {
                    start.linkTo(list.start)
                    end.linkTo(list.end)
                    bottom.linkTo(parent.bottom)
                    width = Dimension.fillToConstraints
                }
                .padding(top = 16.dp),
            onClick = onDismissClicked
        ) {
            Text(text = stringResource(R.string.dismiss).uppercase())
        }
    }
}