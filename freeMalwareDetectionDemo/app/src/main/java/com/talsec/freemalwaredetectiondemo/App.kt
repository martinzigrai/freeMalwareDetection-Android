package com.talsec.freemalwaredetectiondemo

import android.app.Activity
import android.app.Application
import android.os.Bundle
import com.aheaditec.talsec_security.security.api.SuspiciousAppInfo
import com.aheaditec.talsec_security.security.api.Talsec
import com.aheaditec.talsec_security.security.api.TalsecConfig
import com.aheaditec.talsec_security.security.api.ThreatListener
import com.talsec.freemalwaredetectiondemo.ui.screen.MainActivity

class App : Application(), ThreatListener.ThreatDetected {

    private var currentActivity: Activity? = null

    override fun onCreate() {
        super.onCreate()

        // Register activity lifecycle callbacks to track the active activity
        registerActivityLifecycleCallbacks(
            object : ActivityLifecycleCallbacks {
                override fun onActivityCreated(activity: Activity, savedInstanceState: Bundle?) {
                    // if needed
                }

                override fun onActivityStarted(activity: Activity) {
                    currentActivity = activity // Update the current activity when it starts
                }

                override fun onActivityResumed(activity: Activity) {
                    currentActivity = activity // Update the current activity when it resumes
                }

                override fun onActivityPaused(activity: Activity) {
                    currentActivity = null // Clear the activity when it pauses
                }

                override fun onActivityStopped(activity: Activity) {
                    currentActivity = null // Clear the activity when it stops
                }

                override fun onActivityDestroyed(activity: Activity) {
                    currentActivity = null // Clear the activity when it is destroyed
                }

                override fun onActivitySaveInstanceState(activity: Activity, outState: Bundle) {
                    // if needed
                }
            }
        )

        val config = TalsecConfig.Builder(
            EXPECTED_PACKAGE_NAME,
            expectedSigningCertificateHashBase64
        )
            .watcherMail(WATCHER_MAIL)
            .supportedAlternativeStores(supportedAlternativeStores)
            .prod(IS_PROD)
            .blacklistedPackageNames(arrayOf("com.talsec.freemalwaredetectiondemo"))
            .build()

        ThreatListener(this, null).registerListener(this)
        Talsec.start(this, config)
    }

    override fun onRootDetected() {
        // Set your reaction
        println("onRootDetected")
    }

    override fun onDebuggerDetected() {
        // Set your reaction
        // Triggered only in release build
        println("onDebuggerDetected")
    }

    override fun onEmulatorDetected() {
        // Set your reaction
        // Triggered only in release build
        println("onEmulatorDetected")
    }

    override fun onTamperDetected() {
        // Set your reaction
        // Triggered only in release build
        println("onTamperDetected")
    }

    override fun onUntrustedInstallationSourceDetected() {
        // Set your reaction
        // Triggered only in release build
        println("onUntrustedInstallationSourceDetected")
    }

    override fun onHookDetected() {
        // Set your reaction
        println("onHookDetected")
    }

    override fun onDeviceBindingDetected() {
        // Set your reaction
        println("onDeviceBindingDetected")
    }

    override fun onObfuscationIssuesDetected() {
        // Set your reaction
        println("onObfuscationIssuesDetected")
    }

    override fun onMalwareDetected(p0: MutableList<SuspiciousAppInfo>) {
        (currentActivity as? MainActivity)?.run {
            if (!isFinishing && !isDestroyed) {
                showWarning(p0)
            }
        }
    }

    private companion object {
        private const val IS_PROD = true
        private const val WATCHER_MAIL = "john@example.com" // for Alerts and Reports
        private const val EXPECTED_PACKAGE_NAME =
            "com.talsec.freemalwaredetectiondemo" // Don't use Context.getPackageName!
        private val expectedSigningCertificateHashBase64 = arrayOf(
            "mVr/qQLO8DKTwqlL+B1qigl9NoBnbiUs8b4c2Ewcz0k=",
            "cVr/qQLO8DKTwqlL+B1qigl9NoBnbiUs8b4c2Ewcz0m="
        ) // Replace with your release (!) signing certificate hashes
        private val supportedAlternativeStores = arrayOf(
            // Google Play Store and Huawei AppGallery are supported out of the box, you can pass
            // empty array or null or add other stores like the Samsung's one:
            "com.sec.android.app.samsungapps" // Samsung Store
        )
    }
}