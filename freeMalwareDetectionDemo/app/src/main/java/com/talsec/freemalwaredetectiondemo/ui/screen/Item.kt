package com.talsec.freemalwaredetectiondemo.ui.screen

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.graphics.painter.BitmapPainter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.constraintlayout.compose.ConstraintLayout
import androidx.constraintlayout.compose.Dimension
import androidx.core.graphics.drawable.toBitmapOrNull
import com.aheaditec.talsec_security.security.api.SuspiciousAppInfo
import com.talsec.freemalwaredetectiondemo.R

@Composable
fun Item(
    modifier: Modifier = Modifier,
    info: SuspiciousAppInfo,
    onAddToWhitelistClicked: () -> Unit,
    onUninstallClicked: () -> Unit
) {
    var expanded: Boolean by remember { mutableStateOf(false) }
    val context = LocalContext.current
    val packageManager = context.packageManager
    val applicationInfo = info.packageInfo.applicationInfo
    check(applicationInfo != null) { "IllegalState in Item" }
    val appIcon = packageManager.getApplicationIcon(applicationInfo)
    val bitmap = appIcon.toBitmapOrNull(48, 48)?.asImageBitmap()
    check(bitmap != null) { "IllegalState in Item" }
    val appName = packageManager.getApplicationLabel(applicationInfo).toString()

    ConstraintLayout(modifier = modifier.padding(8.dp)) {
        val (icon, name, button, description, whitelist, uninstall) = createRefs()

        Image(
            modifier = Modifier.constrainAs(icon) {
                top.linkTo(parent.top)
                start.linkTo(parent.start)
                height = Dimension.value(48.dp)
                width = Dimension.value(48.dp)
            },
            contentScale = ContentScale.FillBounds,
            painter = BitmapPainter(bitmap),
            contentDescription = null
        )

        Text(
            modifier = Modifier
                .constrainAs(name) {
                    top.linkTo(icon.top)
                    bottom.linkTo(icon.bottom)
                    start.linkTo(icon.end)
                    end.linkTo(button.start)
                    width = Dimension.fillToConstraints
                }
                .padding(horizontal = 16.dp),
            text = appName,
            fontSize = 18.sp,
            maxLines = 2,
            overflow = TextOverflow.Ellipsis
        )

        IconButton(
            modifier = Modifier.constrainAs(button) {
                top.linkTo(icon.top)
                start.linkTo(name.end)
                end.linkTo(parent.end)
            },
            onClick = { expanded = !expanded },
        ) {
            Icon(
                if (expanded) Icons.Default.KeyboardArrowUp else Icons.Default.KeyboardArrowDown,
                contentDescription = null
            )
        }

        if (expanded) {
            Text(
                modifier = Modifier
                    .constrainAs(description) {
                        top.linkTo(icon.bottom)
                        start.linkTo(icon.start)
                        end.linkTo(button.end)
                        width = Dimension.fillToConstraints
                    }
                    .padding(24.dp),
                text = when (info.reason) {
                    "blacklist" -> stringResource(R.string.security_risk)
                    "installSource",
                    "suspiciousPermission" -> stringResource(R.string.untrusted_source)

                    else -> ""
                }
            )

            Button(
                modifier = Modifier.constrainAs(whitelist) {
                    top.linkTo(description.bottom)
                    start.linkTo(parent.start)
                    end.linkTo(uninstall.start)
                },
                onClick = onAddToWhitelistClicked
            ) {
                Text(text = stringResource(R.string.add_to_whitelist))
            }

            Button(
                modifier = Modifier.constrainAs(uninstall) {
                    top.linkTo(whitelist.top)
                    start.linkTo(whitelist.end)
                    end.linkTo(parent.end)
                },
                onClick = onUninstallClicked
            ) {
                Text(text = stringResource(R.string.uninstall))
            }
        }
    }
}