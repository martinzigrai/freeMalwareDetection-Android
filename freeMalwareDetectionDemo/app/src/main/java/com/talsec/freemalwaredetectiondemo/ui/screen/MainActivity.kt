package com.talsec.freemalwaredetectiondemo.ui.screen

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.imePadding
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.constraintlayout.compose.ConstraintLayout
import androidx.lifecycle.MutableLiveData
import com.aheaditec.talsec_security.security.api.SuspiciousAppInfo
import com.aheaditec.talsec_security.security.api.Talsec
import com.talsec.freemalwaredetectiondemo.R
import com.talsec.freemalwaredetectiondemo.ui.theme.FreeMalwareDetectionDemo

class MainActivity : ComponentActivity() {

    private val itemsData = MutableLiveData<List<SuspiciousAppInfo>>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        setContent {
            var data: List<SuspiciousAppInfo> by remember { mutableStateOf(listOf()) }

            FreeMalwareDetectionDemo {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    Content(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(innerPadding),
                        data = data,
                        onDismissClicked = { data = listOf() }
                    )
                }
            }

            LaunchedEffect(null) {
                itemsData.observe(this@MainActivity) { value ->
                    data = value
                }
            }
        }
    }

    @Composable
    fun Content(
        modifier: Modifier = Modifier,
        data: List<SuspiciousAppInfo>,
        onDismissClicked: () -> Unit
    ) {
        ConstraintLayout(modifier = modifier.imePadding()) {
            val (text, overlay) = createRefs()

            Text(
                text = stringResource(R.string.secured),
                modifier = Modifier.constrainAs(text) {
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                    top.linkTo(parent.top)
                    bottom.linkTo(parent.bottom)
                }
            )

            if (data.isNotEmpty()) {
                Overlay(
                    modifier = Modifier.constrainAs(overlay) {
                        start.linkTo(parent.start)
                        end.linkTo(parent.end)
                        top.linkTo(parent.top)
                        bottom.linkTo(parent.bottom)
                    },
                    data = data,
                    onAddToWhitelistClicked = { addToWhitelist(it) },
                    onUninstallClicked = { uninstall(it) },
                    onDismissClicked = onDismissClicked
                )
            }
        }
    }

    fun showWarning(items: List<SuspiciousAppInfo>) {
        itemsData.postValue(items)
    }

    private fun addToWhitelist(info: SuspiciousAppInfo) {
        Talsec.addToWhitelist(this, info.packageInfo.packageName)
        itemsData.value?.toMutableList()?.let { items ->
            items.remove(info)
            itemsData.postValue(items)
        }
    }

    private fun uninstall(info: SuspiciousAppInfo) {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
        val uri = Uri.fromParts("package", info.packageInfo.packageName, null)
        intent.setData(uri)
        startActivity(intent)
    }
}